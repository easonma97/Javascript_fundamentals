destructing: [A, B] = [B, A] / [A, , C] = [A, B, C]

To destructure object, use curly braces:
const {name, openingHours, categories} = restaurant;

Can pass one object into the argument of the function, it will auto-destructing.
=================
Spread Operator ...
unpacking all the array elements at once
const arr = [7, 8, 9]
const newArr = [1,2, ...arr]

Shallow Copy array
const mainMenuCopy = [...restaurant.mainMenu];

Join 2 arrays
const menu = [...restaurant.mainMenu, ...restaurant.starterMenu];

Iterables are arrays, strings, maps, sets. Not objects.
const str = 'Jonas';
const letters = [...str, ' ', 'S.']; 
================
// SPREAD, because on Right side of equal sign, unpack things from array
const arr = [1,2, ...[3,4]];
// REST, because on Left side of equal sign, pack things into array
const [a, b, ...others] = [1, 2, 3, 4, 5];
The Rest element must be the last element
Spread operator is used where we would otherwise write values, separated by a comma.
Rest operator is used where we would otherwise write variable names, separated by a comma.
=================
Short Circuiting (&& and ||)
console.log(3 || 'Jonas')  --3 -- for OR operator: it will return the first truthy value.
const a = xx || 10;
console.log(0 && 'Jonas') --0 -- for AND operator: it will return the first falsy value. 
=================
?? Nullish: Null and undefined, in this case 0 or '' is truthy value as well
=================
const rest1 = {
  name: 'Capri',
  numGuests: 20,
};

const rest2 = {
  name: 'La Piazza',
  owner: 'Rossi',
};

rest1.numGuests = rest1.numGuests || 10  === rest1.numGuests ||= 10;
rest2.numGuests = rest2.numGuests || 10  === rest2.numGuests ||= 10;

