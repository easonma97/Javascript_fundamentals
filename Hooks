Handling Events?

<Event and State>
props start with 'on', e.g. onClick, onSubmit
E.g. onClick can let you make declarative stament on DOM EventListener

What is hooks?
useState, useEffect
* must be called directly inside the component function

useState with object initialized, how to make sure values inside the object will not get lost?
const [userInput, setUserInput] = useState({
  x : xx,
  y : yy,
  z : zz
});
setUserInput({
  ...userInput,
  x : xxx
})

CSS property name in JSX, all are camelCase.

- JSX Limitations & Fragments
* can't return more than one "root" JSX element.  -solution: always wrap adjacent elements
React.Fragment can reduce unnecessary div element.

- Getting a Cleaner DOM with Portals
ReactDOM.createPortal(<.. />, document.getElementById('..')) Move the html element of a particular react component to other places.
Semantically more correct html code

- Working with Refs
If you want to read the value, ref can be better than state

Effects, Reducers & Context
- Working with (Side) Effects
1.Store Data in Browser Storage
2.Send Http Requests to Backend Servers
3.Set & Manage Timers
There tasks must happen outside of the normal component evaluation and render cycle.

UseEffect: (function, dependencies)
You must add all "things" you use in your effect function if those "things" could change because your component (or some parent component) re-rendered. 
You DON'T need to add state updating functions (as we did in the last lecture with setFormIsValid): React guarantees that those functions never change, hence you don't need to add them as dependencies (you could though)
You also DON'T need to add "built-in" APIs or functions like fetch(), localStorage etc (functions and features built-into the browser and hence available globally): These browser APIs / global functions are not related to the React component render cycle and they also never change
You also DON'T need to add variables or functions you might've defined OUTSIDE of your components (e.g. if you create a new helper function in a separate file): Such functions or variables also are not created inside of a component function and hence changing them won't affect your components (components won't be re-evaluated if such variables or functions change and vice-versa)

return in useEffect: clean up any resources that were created or used by the side effect

Tips for the effect function: adding nested properties as dependencies to useEffect

- Managing more Complex State with Reducers
const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);

- Managing App-Wide ore Component-Wide State with Context

